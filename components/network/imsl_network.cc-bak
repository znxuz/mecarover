// global headers
#include <ETH.h>
#include <WiFi.h>

// configuration headers
#include "network_config.h" // definition of network and hardware parameters

// local C++ headers
#include "mrlogger.h"

namespace imsl {
static bool netw_connected = false;

bool networkIsConnected() {
    return netw_connected;
}

void WiFiEvent(WiFiEvent_t event) {
  switch (event) {
// --------------- Ethernet ------------------
    case SYSTEM_EVENT_ETH_START:
      printf("esp32 ETH Started");
      //set eth hostname here
      ETH.setHostname(esp32Hostname);
      break;
    case SYSTEM_EVENT_ETH_CONNECTED:
      printf("ETH Connected");
      break;
    case SYSTEM_EVENT_ETH_GOT_IP:
      printf("ETH MAC: ");
      printf(String(ETH.macAddress()).c_str());
      printf(", IPv4: ");
      printf(ETH.localIP().toString().c_str());
      if (ETH.fullDuplex()) {
        printf(", FULL_DUPLEX");
      }
      printf(", ");
      printf(String(ETH.linkSpeed()).c_str());
      printf("Mbps\n");
      netw_connected = true;
      break;
    case SYSTEM_EVENT_ETH_DISCONNECTED:
      printf("ETH Disconnected\n");
      netw_connected = false;
      break;
    case SYSTEM_EVENT_ETH_STOP:
      printf("ETH Stopped\n");
      netw_connected = false;
      break;

// --------------- WiFi ----------------------
    case SYSTEM_EVENT_STA_START:
      printf("esp32 WiFi client Started\n");
      //set eth hostname here
      ETH.setHostname(esp32Hostname);
      break;
    case SYSTEM_EVENT_STA_CONNECTED:
      printf("WiFi client Connected\n");
      break;
    case SYSTEM_EVENT_STA_GOT_IP:
      printf("WiFi MAC: ");
      printf(String(WiFi.macAddress()).c_str());
      printf(", IPv4: ");
      printf(WiFi.localIP().toString().c_str());
      netw_connected = true;
      break;
    case SYSTEM_EVENT_STA_DISCONNECTED:
      printf("WiFi client Disconnected\n");
      netw_connected = false;
      break;
    case SYSTEM_EVENT_STA_STOP:
      printf("WiFi client Stopped\n");
      netw_connected = false;
      break;
    default:
      break;
  }
}

void networkInit() {
  WiFi.onEvent(WiFiEvent);
  if (networkType == NetworkType::Ethernet) {
    if (ETH.begin(ethAddr, ethPowerPin, ethMDCPin, ethMDIOPin, phyType, clkMode)) {
      printf("ETH.begin ok\n");
    } else {
      printf("ETH.begin error\n");    
    }
  } else if (networkType == NetworkType::Ethernet) {
    WiFi.begin(ssid, pass);
  }
}
} // namespace imsl

// -------------------- some old stuff / trash:
//#include "WiFi.h"     // does not work correctly .isConnected failed
//#include "EspIdfWiFi.h" // own implementation of WiFi

/*
WiFi:
0  SYSTEM_EVENT_WIFI_READY               < ESP32 WiFi ready
1  SYSTEM_EVENT_SCAN_DONE                < ESP32 finish scanning AP
2  SYSTEM_EVENT_STA_START                < ESP32 station start
3  SYSTEM_EVENT_STA_STOP                 < ESP32 station stop
4  SYSTEM_EVENT_STA_CONNECTED            < ESP32 station connected to AP
5  SYSTEM_EVENT_STA_DISCONNECTED         < ESP32 station disconnected from AP
6  SYSTEM_EVENT_STA_AUTHMODE_CHANGE      < the auth mode of AP connected by ESP32 station changed
7  SYSTEM_EVENT_STA_GOT_IP               < ESP32 station got IP from connected AP
8  SYSTEM_EVENT_STA_LOST_IP    
*/


/*
    EspIdfWiFi.begin(ssid, pass);
    while(!EspIdfWiFi.isConnected()) {
      printf("."); delay(500);
    }
*/    
    
//  delete old config
//    WiFi.disconnect(true);
//  delay(1000);
//  WiFi.onEvent(WiFiEvent);

//    WiFi.begin(ssid, pass);

    // dirty solution for status detection
/*
    IPAddress result;
    while (WiFi.hostByName("www.google.com", result) != 1) {
      printf("."); delay(500);
    }

    printf("Connected with IP address: %s\n", WiFi.localIP().toString().c_str());
    WiFi._setStatus(WL_CONNECTED);
*/
/*
    while(!WiFi.isConnected()) {
      printf("."); fflush(stdout); delay(500);
    }

    printf("Connected with IP address: %s\n", WiFi.localIP().toString().c_str());
*/
//    WiFi.waitForConnectResult();

/*
    IPAddress result;
    while (WiFi.hostByName("www.google.com", result) != 1) {
      printf("."); delay(500);
    }

    printf("Connected with IP address: %s\n", WiFi.localIP().toString().c_str());
    WiFi._setStatus(WL_CONNECTED);
*/



